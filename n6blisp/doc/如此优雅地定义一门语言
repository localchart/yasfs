类型 
这里说的类型不是指"语言的基本数据类型"，而是从语言实现角度讲的类型
最基本的类型包括：原子，S表达式，函数，特殊表

原子
一个原子就是一个符号，它可以是任何东西。
把一个值绑定到一个符号，绑定了值的符号就是变量。
lisp语言中变量是没有类型的，变量的值是有类型的。
符号是可以动态绑定的，所以说原子可以是任何东西：可能是个数字，可能是个函数...

pair和list

几个基本操作
atom---判断给定的变量是否是个原子
quote---返回变量的符号，而不是变量的值
cons--构造一个(car . cdr)对
car---返回一个pair的car
cdr---返回一个pair的cdr
eq---判断二个符号绑定的值是否是同一个
cond---条件表达式

S表达式
S表达式要么是一个原子，要么是一个pair，要么是一个list
具体点，比如说
A   这是一个原子，是S表达式
(A . B)这是一个pair，是S表达式
(A B C)这是一个list,是S表达式
S表达式的存储形式:
如果是原子，就是存的原子的值。否则存的是链表形式
S表达式的计算规则：
如果S表达式是原子,则直接返回这个原子的值.
否则S表达式是pair或list，将第一个当作函数名，其它都当作参数，执行这个函数

lambda表达式
lambda表达式是的形式是这样的:
(lambda arg body)
其中arg部分是一个链表 body是一个S表达式
比如
(lambda (x) x)
(lambda (x y) (cons x y))
lambda表达式的语义是：
表达一个未命名的函数，即arg部分是形参,body是函数体
比如以下是函数调用((lambda (x y) (cons x y)) 3 4)
用3替换x  用4替换y  然后执行函数体部分并返回结果，也就是(cons 3 4)
lambda特殊表的计算规则(函数定义的实现)：
将body部分，arg部分，加下定义时的环境env，组合成一个链表，返回链表指针
函数调用的实现：
将S表达式中的形参的符号，全用实参符号替换，将自由变量用env中的符号替换，然后计算
这个S表达式

函数--命名lambda表达式
如果给lambda表达式绑定到一个符号，这就是定义一个函数了
(define func (lambda (x y) (cons x y)))
define将func这个符号，绑定到了(lambda (x y) (cons x y))这个lambda表达式，func就成为了
一个函数。
调用(func 3 4)就等价于调用((lambda (x y) (cons x y)) 3 4)
lisp是如此的优雅，仅用几个最基本的操作，组合这些操作和参数就成了S表达式
在S表达式的基础上定义了lambda表达式，由lambda表达式定义了函数，进而创建了一门语言！

eval解释器
定义一个eval函数，用于计算S表达式，这就成了lisp语言的解释器了
伪代码如下：
eval(S表达式p)
{
如果p是原子
	如果p的类型是函数/特殊表	打印消息说这是一个函数
	如果p的类型是数字		打印这个数字
	如果p的类型是变量		打印这个变量对应的值
否则
	如果car(p)是函数
		分别eval(后面每个链表结点)作为参数
		调用(car(p) 参数)
	如果car(p)是特殊表
		按特殊表的规则计算
}

闭包

特殊表和宏



目标：
性能不是最优先考虑
简单性必须保证
能与C语言相互调用
垃圾回收
不仅实现解释器，还要实现编译器
编译成机器码？
基于虚拟机？



高级对象表示
垃圾回收
尾递归消除
编译技术
虚拟机

Gary Knott's Interpreting lisp 单个c 943行 stdio string stdlib math setjmp
Jim Mayfield's lisp lisp.c+lisp.h 173+578行
Xlisp
lisp500
guile

lisp语言实现的性能的主要影响因素：
类型表示系统
虚拟机模型
存储系统

内存回收算法:
1.引用记数法
2.标记清扫法
3.复制算法

标记整理算法


子系统：
分析器--词法分析
内存管理系统---要实现一个提供垃圾回收的内存分配器
eval--解释器
编译系统
